#!/usr/bin/env python3
import argparse
import socket
import ssl
from html.parser import HTMLParser

DEFAULT_SERVER = "proj5.3700.network"
DEFAULT_PORT = 443


class FakebookHTMLParser(HTMLParser):
    atts = []

    def handle_starttag(self, tag, attrs):
        print(attrs)
        for attr in attrs:
            if attr:
                for tup in attr:
                    # print("tup")
                    # print(tup)
                    if (tup is not None):
                        if 'href' in tup:
                            self.atts.append(attr)
                        elif 'secret_flag' in tup:
                            print('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!')
                            print(tup)
                        elif 'post' in tup:
                            self.atts.insert(0, attr)

    # def handle_endtag(self, tag):
    #     print("Encountered an end tag :", tag)

    # def handle_data(self, inf):
    #     print("Encountered some data  :", inf)


class Crawler:
    def __init__(self, args):
        self.server = args.server
        self.port = args.port
        self.username = args.username
        self.password = args.password
        self.context = ssl.create_default_context()
        self.crawled = []
        self.toCrawl = []
        self.next = 'GET /fakebook/ HTTP/1.0\r\n\r\n'
        self.secret_flags = []

    # def crawl(self):
    #     while self.toCrawl:




    def processResponse(self, resp):
        for line in resp.splitlines():
            if "302" in line:
                continue
            if "Location" in line:
                self.next = f'GET {line[10:]} HTTP/1.0\r\n\r\n'

    def run(self):
        request = ''

        while len(self.secret_flags) != 5:
            if request == self.next:
                break
            request = self.next
            print("Request to %s:%d" % (self.server, self.port))
            print(request)
            mysocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            mysocket.connect((self.server, self.port))
            if self.port == 443:
                mysocket = self.context.wrap_socket(mysocket, server_hostname=self.server)
            mysocket.send(request.encode('ascii'))
            data = mysocket.recv(3000).decode('ascii')
            print("Response:\n%s" % data)
            self.processResponse(data)
            myhtml = FakebookHTMLParser()
            myhtml.feed(data)
            atts = myhtml.atts
            if atts:
                if 'post' in atts[0]:
                    self.next = f'POST /accounts/login/?next=/fakebook/ HTTP/1.0 \nUsername: self.username\nPassword: ' \
                                f'self.password '
                    continue
            self.toCrawl.append(atts)
            print(self.toCrawl)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='crawl Fakebook')
    parser.add_argument('-s', dest="server", type=str, default=DEFAULT_SERVER, help="The server to crawl")
    parser.add_argument('-p', dest="port", type=int, default=DEFAULT_PORT, help="The port to use")
    parser.add_argument('username', type=str, help="The username to use")
    parser.add_argument('password', type=str, help="The password to use")
    args = parser.parse_args()
    sender = Crawler(args)
    sender.run()
